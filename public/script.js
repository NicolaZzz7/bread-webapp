// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let products = [];
let cart = JSON.parse(localStorage.getItem('cart')) || [];
let selectedWeights = {};
let selectedAddons = {};
let currentProduct = null;
let quantities = {};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
Telegram.WebApp.ready();
Telegram.WebApp.expand();

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
async function loadCatalog() {
    console.log('–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞');
    try {
        const response = await fetch('/api/catalog');
        console.log('Response status:', response.status);
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + response.status);
        }
        const data = await response.json();
        console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', data);
        products = data;
        renderProducts(products);
        updateCartIndicator();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        showErrorState(error.message);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
function renderProducts(productsToRender) {
    const grid = document.getElementById('productGrid');

    if (!productsToRender || Object.keys(productsToRender).length === 0) {
        grid.innerHTML = getEmptyStateHTML('üîç', '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å');
        return;
    }

    grid.innerHTML = Object.entries(productsToRender).map(([productId, product]) =>
        createProductCard(productId, product)
    ).join('');
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
function createProductCard(productId, product) {
    const availableWeights = getAvailableWeights(product);
    const minPrice = availableWeights.length > 0 ? Math.min(...availableWeights.map(w => w.price)) : 0;
    const maxPrice = availableWeights.length > 0 ? Math.max(...availableWeights.map(w => w.price)) : 0;

    // –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –¥–æ–±–∞–≤–æ–∫ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    const priceWithAddons = product.hasAddons ? minPrice + product.addonsPrice : minPrice;
    const displayPrice = product.hasAddons ? `${minPrice}-${maxPrice}‚ÇΩ (+50‚ÇΩ –∑–∞ –¥–æ–±–∞–≤–∫–∏)` : `${minPrice}‚ÇΩ`;

    return `
        <div class="product-card" onclick="openProductModal('${productId}')">
            <div class="product-header">
                <div class="product-emoji">${getBreadEmoji(product.name)}</div>
                <div class="product-info">
                    <div class="product-name">${product.name}</div>
                    <div class="product-ingredients">${product.ingredients || '–°–æ—Å—Ç–∞–≤ –Ω–µ —É–∫–∞–∑–∞–Ω'}</div>
                    <div class="product-meta">
                        <div class="meta-item">‚è∞ ${product.prep_time || '1-2 –¥–Ω—è'}</div>
                        ${product.hasAddons ? `<div class="meta-item">‚ú® –î–æ–±–∞–≤–∫–∏ +50‚ÇΩ</div>` : ''}
                    </div>
                </div>
            </div>
            
            ${availableWeights.length > 0 ? `
                <div style="text-align: center;">
                    <div class="price-badge">${displayPrice}</div>
                </div>
            ` : ''}
        </div>
    `;
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ç–æ–≤–∞—Ä–∞
function openProductModal(productId) {
    currentProduct = productId;
    const product = products[productId];
    const availableWeights = getAvailableWeights(product);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –≤–µ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (availableWeights.length > 0 && !selectedWeights[productId]) {
        selectedWeights[productId] = availableWeights[0].weight;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –¥–æ–±–∞–≤–∫–∏
    if (!quantities[productId]) {
        quantities[productId] = {};
    }
    if (!selectedAddons[productId]) {
        selectedAddons[productId] = false; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ–∑ –¥–æ–±–∞–≤–æ–∫
    }
    if (!quantities[productId][selectedWeights[productId]]) {
        quantities[productId][selectedWeights[productId]] = 1;
    }

    const modalHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <div class="modal-title">${product.name}</div>
                <button class="close-modal" onclick="closeProductModal()">√ó</button>
            </div>
            
            <div class="modal-emoji">${getBreadEmoji(product.name)}</div>
            
            <div class="modal-details">
                <div class="detail-item">
                    <span class="detail-label">–°–æ—Å—Ç–∞–≤:</span> ${product.ingredients || '–ù–µ —É–∫–∞–∑–∞–Ω'}
                </div>
                <div class="detail-item">
                    <span class="detail-label">–°—Ä–æ–∫ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:</span> ${product.prep_time || '1-2 –¥–Ω—è'}
                </div>
            </div>
            
            <!-- –í—ã–±–æ—Ä –≤–µ—Å–∞ -->
            <div class="detail-item">
                <span class="detail-label">–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Å:</span>
            </div>
            
            ${availableWeights.map(({weight, price}) => `
                <div class="weight-option ${selectedWeights[productId] === weight ? 'selected' : ''}" 
                     onclick="selectWeight('${weight}')">
                    <div class="weight-info">
                        <span>${weight}–≥</span>
                    </div>
                    <div class="weight-price">${price}‚ÇΩ</div>
                </div>
            `).join('')}
            
            ${product.hasAddons ? `
                <!-- –í—ã–±–æ—Ä –¥–æ–±–∞–≤–æ–∫ -->
                <div class="detail-item" style="margin-top: 16px;">
                    <span class="detail-label">–î–æ–±–∞–≤–∫–∏:</span>
                </div>
                <div class="addons-option ${selectedAddons[productId] ? 'selected' : ''}" 
                     onclick="toggleAddons()">
                    <div class="addons-info">
                        <span>${product.addonsText || '—Å–µ–º–µ–Ω–∞ –ª—å–Ω–∞, —Å–µ–º–µ—á–∫–∏, —Ç—ã–∫–≤–∞'}</span>
                    </div>
                    <div class="addons-price">+${product.addonsPrice}‚ÇΩ</div>
                </div>
            ` : ''}
            
            ${availableWeights.length > 0 ? `
                <!-- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º -->
                <div class="quantity-controls">
                    <div class="quantity-label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</div>
                    <div class="quantity-buttons">
                        <button class="quantity-btn" onclick="changeQuantity(-1)">-</button>
                        <span class="quantity-value" id="quantityValue">${quantities[productId][selectedWeights[productId]]}</span>
                        <button class="quantity-btn" onclick="changeQuantity(1)">+</button>
                    </div>
                </div>
                
                <!-- –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ -->
                <div class="modal-total" id="modalTotal">
                    –ò—Ç–æ–≥–æ: ${calculateTotal(productId)}‚ÇΩ
                </div>
                
                <!-- –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É -->
                <button class="add-to-cart-btn" onclick="addToCart()">
                    üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
                </button>
            ` : ''}
        </div>
    `;

    document.getElementById('productModal').innerHTML = modalHTML;
    document.getElementById('productModal').style.display = 'block';
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–±–∞–≤–æ–∫
function toggleAddons() {
    if (!currentProduct) return;

    selectedAddons[currentProduct] = !selectedAddons[currentProduct];

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const addonsOption = document.querySelector('.addons-option');
    if (addonsOption) {
        addonsOption.classList.toggle('selected', selectedAddons[currentProduct]);
    }

    updateModalTotal();
}

// –í—ã–±–æ—Ä –≤–µ—Å–∞
function selectWeight(weight) {
    if (!currentProduct) return;

    selectedWeights[currentProduct] = weight;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–µ—Å–∞
    if (!quantities[currentProduct][weight]) {
        quantities[currentProduct][weight] = 1;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    document.querySelectorAll('.weight-option').forEach(option => {
        const optionWeight = option.querySelector('.weight-info span').textContent.replace('–≥', '');
        option.classList.toggle('selected', optionWeight === weight);
    });

    updateModalTotal();
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
function changeQuantity(delta) {
    if (!currentProduct) return;

    const currentWeight = selectedWeights[currentProduct];
    const currentQty = quantities[currentProduct][currentWeight] || 1;
    const newQty = Math.max(1, currentQty + delta);

    quantities[currentProduct][currentWeight] = newQty;

    document.getElementById('quantityValue').textContent = newQty;
    updateModalTotal();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—É–º–º—ã –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
function updateModalTotal() {
    if (!currentProduct) return;

    const total = calculateTotal(currentProduct);
    document.getElementById('modalTotal').textContent = `–ò—Ç–æ–≥–æ: ${total}‚ÇΩ`;
}

// –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—É–º–º—ã —Å —É—á–µ—Ç–æ–º –¥–æ–±–∞–≤–æ–∫
function calculateTotal(productId) {
    const product = products[productId];
    const weight = selectedWeights[productId];
    const quantity = quantities[productId][weight] || 1;
    const basePrice = product.prices[weight] || 0;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–±–∞–≤–æ–∫ –µ—Å–ª–∏ –æ–Ω–∏ –≤—ã–±—Ä–∞–Ω—ã
    const addonsPrice = selectedAddons[productId] ? product.addonsPrice : 0;
    const totalPricePerItem = basePrice + addonsPrice;

    return totalPricePerItem * quantity;
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É —Å —É—á–µ—Ç–æ–º –¥–æ–±–∞–≤–æ–∫
function addToCart() {
    if (!currentProduct) return;

    const product = products[currentProduct];
    const weight = selectedWeights[currentProduct];
    const quantity = quantities[currentProduct][weight] || 1;
    const basePrice = product.prices[weight] || 0;
    const addonsPrice = selectedAddons[currentProduct] ? product.addonsPrice : 0;
    const totalPricePerItem = basePrice + addonsPrice;
    const totalPrice = totalPricePerItem * quantity;

    if (!weight || !basePrice) {
        showNotification('–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞', 'error');
        return;
    }

    const cartItem = {
        id: currentProduct,
        name: product.name,
        weight: weight,
        basePrice: basePrice,
        addons: selectedAddons[currentProduct],
        addonsPrice: addonsPrice,
        price: totalPricePerItem, // –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Å —É—á–µ—Ç–æ–º –¥–æ–±–∞–≤–æ–∫
        quantity: quantity,
        total: totalPrice,
        emoji: getBreadEmoji(product.name),
        timestamp: Date.now()
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ (—Å —É—á–µ—Ç–æ–º –¥–æ–±–∞–≤–æ–∫)
    const existingIndex = cart.findIndex(item =>
        item.id === currentProduct &&
        item.weight === weight &&
        item.addons === selectedAddons[currentProduct]
    );

    if (existingIndex > -1) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
        cart[existingIndex].quantity += quantity;
        cart[existingIndex].total = cart[existingIndex].price * cart[existingIndex].quantity;
    } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
        cart.push(cartItem);
    }

    saveCart();
    updateCartIndicator();
    closeProductModal();

    Telegram.WebApp.HapticFeedback.impactOccurred('light');

    const addonsText = selectedAddons[currentProduct] ? ' —Å –¥–æ–±–∞–≤–∫–∞–º–∏' : '';
    showNotification(`${product.name} (${weight}–≥)${addonsText} x${quantity} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!`, 'success');
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getAvailableWeights(product) {
    return Object.entries(product.prices || {})
        .filter(([weight, price]) => price > 0)
        .map(([weight, price]) => ({ weight, price }));
}

function getBreadEmoji(name) {
    const nameLower = name.toLowerCase();
    if (nameLower.includes('—Ä–∂–∞–Ω–æ–π')) return 'üçû';
    if (nameLower.includes('–ø—à–µ–Ω–∏—á–Ω—ã–π')) return 'ü•ñ';
    if (nameLower.includes('–±–æ—Ä–æ–¥–∏–Ω—Å–∫–∏–π')) return 'ü•®';
    if (nameLower.includes('–∑–µ—Ä–Ω–æ–≤–æ–π') || nameLower.includes('—Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–π')) return 'üåæ';
    if (nameLower.includes('—Å—ã—Ä')) return 'üßÄ';
    if (nameLower.includes('–∫–ª—é–∫–≤')) return 'ü´ê';
    if (nameLower.includes('—à–æ–∫–æ–ª–∞–¥')) return 'üç´';
    if (nameLower.includes('–¥–µ—Ä–µ–≤–µ–Ω—Å–∫')) return 'üè°';
    if (nameLower.includes('–≥—Ä–∏—Å—Å–∏–Ω–∏') || nameLower.includes('–ø–∞–ª–æ—á–∫–∏')) return 'ü•ñ';
    return 'üçû';
}

function saveCart() {
    localStorage.setItem('cart', JSON.stringify(cart));
}

function updateCartIndicator() {
    const indicator = document.getElementById('cartIndicator');
    const countElement = document.getElementById('cartCount');
    const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);

    if (indicator && countElement) {
        countElement.textContent = totalItems;
        indicator.style.display = totalItems > 0 ? 'flex' : 'none';
    }
}

function showErrorState(message) {
    const grid = document.getElementById('productGrid');
    grid.innerHTML = getEmptyStateHTML('üòï', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥', message);
}

function getEmptyStateHTML(icon, title, subtitle) {
    return `
        <div class="empty-state">
            <div class="icon">${icon}</div>
            <div>${title}</div>
            ${subtitle ? `<div style="margin-top: 8px; font-size: 14px;">${subtitle}</div>` : ''}
        </div>
    `;
}

// –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
function handleSearch(e) {
    const searchTerm = e.target.value.toLowerCase();

    if (!searchTerm) {
        renderProducts(products);
        return;
    }

    const filteredProducts = Object.entries(products).reduce((acc, [id, product]) => {
        if (product.name.toLowerCase().includes(searchTerm) ||
            (product.ingredients && product.ingredients.toLowerCase().includes(searchTerm))) {
            acc[id] = product;
        }
        return acc;
    }, {});

    renderProducts(filteredProducts);
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
function openCart() {
    if (cart.length === 0) {
        showNotification('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞', 'info');
        return;
    }

    const cartSummary = cart.map(item => {
        const addonsText = item.addons ? ' —Å –¥–æ–±–∞–≤–∫–∞–º–∏' : '';
        return `${item.emoji} ${item.name} (${item.weight}–≥)${addonsText} x${item.quantity} - ${item.total}‚ÇΩ`;
    }).join('\n');

    const total = cart.reduce((sum, item) => sum + item.total, 0);
    const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);

    Telegram.WebApp.showConfirm(
        `üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ (${totalItems} —Ç–æ–≤–∞—Ä–æ–≤):\n\n${cartSummary}\n\nüíé –ò—Ç–æ–≥–æ: ${total}‚ÇΩ`,
        '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?',
        (confirmed) => {
            if (confirmed) {
                Telegram.WebApp.sendData(JSON.stringify({
                    action: 'checkout',
                    cart: cart,
                    total: total,
                    totalItems: totalItems
                }));
            }
        }
    );
}

function showNotification(message, type = 'info') {
    Telegram.WebApp.showPopup({
        title: type === 'success' ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ',
        message: message,
        buttons: [{ type: 'ok' }]
    });
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
document.addEventListener('click', function(e) {
    const modal = document.getElementById('productModal');
    if (e.target === modal) {
        closeProductModal();
    }
});

function closeProductModal() {
    document.getElementById('productModal').style.display = 'none';
    currentProduct = null;
}

// –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ–∏—Å–∫–∞
document.getElementById('searchInput').addEventListener('input', handleSearch);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
loadCatalog();