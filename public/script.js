// ===== GLOBAL STATE =====
let products = [];
let cart = JSON.parse(localStorage.getItem('cart')) || [];
let currentProduct = null;
let quantities = {};

// ===== INITIALIZATION =====
function initApp() {
    Telegram.WebApp.ready();
    Telegram.WebApp.expand();

    // –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –æ—Ç –º—É—Å–æ—Ä–∞
    cart = cart.filter(item => item && item.id && item.name && item.name !== 'undefined');
    saveCart();

    updateCartIndicator();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –µ—Å–ª–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if (document.getElementById('productGrid')) {
        loadCatalog();
    }

    // –†–µ–Ω–¥–µ—Ä–∏–º –∫–æ—Ä–∑–∏–Ω—É –µ—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–æ—Ä–∑–∏–Ω—ã
    if (document.getElementById('cartGrid')) {
        renderCart();
        setupCheckoutButton();
    }
}

// ===== CART MANAGEMENT =====
function updateCartIndicator() {
    const indicator = document.getElementById('cartIndicator');
    const countElement = document.getElementById('cartCount');
    const checkoutBtn = document.getElementById('checkoutBtn');
    const goToCartBtn = document.getElementById('goToCartBtn');

    const totalItems = cart.length;

    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–æ—Ä–∑–∏–Ω—ã
    if (indicator && countElement) {
        countElement.textContent = totalItems;
        if (totalItems > 0) {
            indicator.classList.add('visible');
        } else {
            indicator.classList.remove('visible');
        }
    }

    // –ö–Ω–æ–ø–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    if (checkoutBtn) {
        if (totalItems > 0) {
            checkoutBtn.disabled = false;
            checkoutBtn.style.display = 'block';
        } else {
            checkoutBtn.disabled = true;
            checkoutBtn.style.display = 'none';
        }
    }

    // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É (–≤ –º–æ–¥–∞–ª–∫–µ)
    if (goToCartBtn) {
        if (totalItems > 0) {
            goToCartBtn.style.display = 'block';
        } else {
            goToCartBtn.style.display = 'none';
        }
    }
}

function saveCart() {
    localStorage.setItem('cart', JSON.stringify(cart));
}

function getTotalPrice() {
    return cart.reduce((sum, item) => sum + (item.total || 0), 0);
}

function getTotalItems() {
    return cart.length;
}

// ===== CATALOG FUNCTIONS =====
async function loadCatalog() {
    try {
        showLoadingState();
        const response = await fetch('/api/catalog');

        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${response.status}`);
        }

        products = await response.json();
        renderProducts(products);

    } catch (error) {
        showErrorState('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥', error.message);
    }
}

function renderProducts(productsToRender) {
    const grid = document.getElementById('productGrid');

    if (!productsToRender || Object.keys(productsToRender).length === 0) {
        grid.innerHTML = getEmptyStateHTML('üîç', '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å');
        return;
    }

    grid.innerHTML = Object.entries(productsToRender).map(([productId, product]) =>
        createProductCard(productId, product)
    ).join('');
}

function createProductCard(productId, product) {
    const quantityInCart = cart.filter(item => item.id === productId).length;
    const hasAddons = product.addons && parseInt(product.addons) > 0;

    return `
        <div class="product-card" onclick="openProductModal('${productId}')">
            <div class="product-header">
                <div class="product-emoji">${getBreadEmoji(product.name)}</div>
                <div class="product-info">
                    <div class="product-name">${product.name}</div>
                    <div class="product-ingredients">${product.ingredients || '–°–æ—Å—Ç–∞–≤ –Ω–µ —É–∫–∞–∑–∞–Ω'}</div>
                    <div class="product-meta">
                        <div class="meta-item">‚è∞ ${product.prep_time || '1-2 –¥–Ω—è'}</div>
                        ${hasAddons ? `<div class="meta-item">‚ú® –î–æ–±–∞–≤–∫–∏ +${product.addons}‚ÇΩ</div>` : ''}
                    </div>
                </div>
            </div>
            
            ${quantityInCart > 0 ? `
                <div class="product-quantity-indicator">
                    ${quantityInCart}
                </div>
            ` : ''}
            
            <div class="price-badge">
                –æ—Ç ${Math.min(...Object.values(product.prices).filter(p => p > 0))}‚ÇΩ
            </div>
        </div>
    `;
}

// ===== MODAL FUNCTIONS =====
function openProductModal(productId) {
    currentProduct = productId;
    const product = products[productId];

    if (!quantities[productId]) {
        quantities[productId] = {};
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    const availableWeights = getAvailableWeights(product);
    availableWeights.forEach(({weight}) => {
        quantities[productId][weight] = cart.filter(item =>
            item.id === productId && item.weight === weight
        ).length;
    });

    const modalHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <div class="modal-title">${product.name}</div>
                <button class="close-modal" onclick="closeProductModal()">√ó</button>
            </div>
            
            <div class="modal-emoji">${getBreadEmoji(product.name)}</div>
            
            <div class="modal-details">
                <div class="detail-item">
                    <span class="detail-label">–°–æ—Å—Ç–∞–≤:</span> ${product.ingredients || '–ù–µ —É–∫–∞–∑–∞–Ω'}
                </div>
                <div class="detail-item">
                    <span class="detail-label">–°—Ä–æ–∫ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:</span> ${product.prep_time || '1-2 –¥–Ω—è'}
                </div>
            </div>
            
            <div class="weight-section">
                <div class="section-title">–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</div>
                ${availableWeights.map(({weight, price}) => {
                    const currentQty = quantities[productId][weight] || 0;
                    return `
                        <div class="weight-row">
                            <div class="weight-info">
                                <span class="weight-label">${weight}–≥</span>
                                <span class="weight-price">${price}‚ÇΩ</span>
                            </div>
                            <div class="quantity-controls">
                                <button class="quantity-btn" onclick="changeQuantity('${weight}', -1)">-</button>
                                <span class="quantity-value">${currentQty}</span>
                                <button class="quantity-btn" onclick="changeQuantity('${weight}', 1)">+</button>
                            </div>
                        </div>
                    `;
                }).join('')}
            </div>
            
            ${product.addons && parseInt(product.addons) > 0 ? `
                <div class="addons-section">
                    <label class="addons-checkbox">
                        <input type="checkbox" id="addonsCheckbox" onchange="toggleAddons(this.checked)">
                        <span class="checkmark"></span>
                        –î–æ–±–∞–≤–∫–∏ (—Å–µ–º–µ–Ω–∞ –ª—å–Ω–∞, —Å–µ–º–µ—á–∫–∏, —Ç—ã–∫–≤–∞) +${product.addons}‚ÇΩ
                    </label>
                </div>
            ` : ''}
            
            <div class="modal-summary">
                <div class="summary-item">
                    <span>–¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ:</span>
                    <span id="modalTotalItems">${getTotalItems()} —à—Ç</span>
                </div>
                <div class="summary-item total">
                    <span>–û–±—â–∞—è —Å—É–º–º–∞:</span>
                    <span id="modalTotalPrice">${getTotalPrice()}‚ÇΩ</span>
                </div>
            </div>
            
            <button class="add-to-cart-btn" id="goToCartBtn" onclick="goToCart()" 
                    style="${getTotalItems() > 0 ? '' : 'display: none;'}">
                üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É (${getTotalItems()} —à—Ç)
            </button>
        </div>
    `;

    document.getElementById('productModal').innerHTML = modalHTML;
    document.getElementById('productModal').style.display = 'block';
}

function changeQuantity(weight, delta) {
    if (!currentProduct) return;

    const product = products[currentProduct];
    const currentQty = quantities[currentProduct][weight] || 0;
    const newQty = Math.max(0, currentQty + delta);

    quantities[currentProduct][weight] = newQty;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
    updateCartForProduct(currentProduct, weight, delta);

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    document.querySelector(`.weight-row .weight-label:contains ('${weight}–≥')`)
        .closest('.weight-row')
        .querySelector('.quantity-value').textContent = newQty;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
    updateModalSummary();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (delta > 0) {
        showNotification(`–î–æ–±–∞–≤–ª–µ–Ω ${product.name} (${weight}–≥)`, 'success');
    } else if (delta < 0 && currentQty > 0) {
        showNotification(`–£–¥–∞–ª—ë–Ω ${product.name} (${weight}–≥)`, 'success');
    }
}

function updateCartForProduct(productId, weight, delta) {
    const product = products[productId];
    const price = product.prices[weight] || 0;
    const addonsPrice = document.getElementById('addonsCheckbox')?.checked ?
        parseInt(product.addons) || 0 : 0;
    const finalPrice = price + addonsPrice;

    if (delta > 0) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
        cart.push({
            id: productId,
            name: product.name,
            weight: weight,
            quantity: 1,
            price: price,
            addonsPrice: addonsPrice,
            finalPrice: finalPrice,
            total: finalPrice,
            hasAddons: addonsPrice > 0,
            emoji: getBreadEmoji(product.name),
            timestamp: Date.now()
        });
    } else if (delta < 0) {
        // –£–¥–∞–ª—è–µ–º –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä
        const index = cart.findIndex(item =>
            item.id === productId && item.weight === weight
        );
        if (index !== -1) {
            cart.splice(index, 1);
        }
    }

    saveCart();
    updateCartIndicator();
    renderProducts(products);
}

function toggleAddons(checked) {
    if (!currentProduct) return;

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    cart.forEach(item => {
        if (item.id === currentProduct) {
            const product = products[currentProduct];
            item.hasAddons = checked;
            item.addonsPrice = checked ? parseInt(product.addons) || 0 : 0;
            item.finalPrice = item.price + item.addonsPrice;
            item.total = item.finalPrice;
        }
    });

    saveCart();
    updateCartIndicator();
    updateModalSummary();
    renderProducts(products);

    showNotification(`–î–æ–±–∞–≤–∫–∏ ${checked ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}`, 'success');
}

function updateModalSummary() {
    document.getElementById('modalTotalItems').textContent = `${getTotalItems()} —à—Ç`;
    document.getElementById('modalTotalPrice').textContent = `${getTotalPrice()}‚ÇΩ`;

    const goToCartBtn = document.getElementById('goToCartBtn');
    if (goToCartBtn) {
        if (getTotalItems() > 0) {
            goToCartBtn.style.display = 'block';
            goToCartBtn.innerHTML = `üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É (${getTotalItems()} —à—Ç)`;
        } else {
            goToCartBtn.style.display = 'none';
        }
    }
}

function closeProductModal() {
    document.getElementById('productModal').style.display = 'none';
    currentProduct = null;
}

function goToCart() {
    closeProductModal();
    window.location.href = '/cart.html';
}

// ===== CART PAGE FUNCTIONS =====
function renderCart() {
    const grid = document.getElementById('cartGrid');
    const checkoutBtn = document.getElementById('checkoutBtn');

    if (!grid) return;

    if (cart.length === 0) {
        grid.innerHTML = getEmptyStateHTML('üõí', '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞', '–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞');
        if (checkoutBtn) checkoutBtn.style.display = 'none';
        return;
    }

    grid.innerHTML = cart.map((item, index) => {
        const product = products[item.id];
        const hasAddonsOption = product.addons && parseInt(product.addons) > 0;

        return `
            <div class="product-card">
                <div class="product-header">
                    <div class="product-emoji">${item.emoji}</div>
                    <div class="product-info">
                        <div class="product-name">${item.name}</div>
                        <div class="product-ingredients">${item.weight}–≥ ‚Ä¢ ${item.finalPrice}‚ÇΩ</div>
                        <div class="product-meta">
                            <div class="meta-item">${item.total}‚ÇΩ</div>
                        </div>
                    </div>
                </div>
                
                ${hasAddonsOption ? `
                    <label class="addons-checkbox">
                        <input type="checkbox" ${item.hasAddons ? 'checked' : ''} 
                               onchange="updateCartItemAddons(${index}, this.checked)">
                        <span class="checkmark"></span>
                        –î–æ–±–∞–≤–∫–∏ +${product.addons}‚ÇΩ
                    </label>
                ` : ''}
                
                <button class="remove-btn" onclick="removeFromCart(${index})">
                    –£–¥–∞–ª–∏—Ç—å
                </button>
            </div>
        `;
    }).join('');

    if (checkoutBtn) {
        checkoutBtn.style.display = 'block';
        checkoutBtn.disabled = false;
    }
}

function updateCartItemAddons(index, hasAddons) {
    if (cart[index]) {
        const product = products[cart[index].id];
        cart[index].hasAddons = hasAddons;
        cart[index].addonsPrice = hasAddons ? parseInt(product.addons) || 0 : 0;
        cart[index].finalPrice = cart[index].price + cart[index].addonsPrice;
        cart[index].total = cart[index].finalPrice;

        saveCart();
        renderCart();
        updateCartIndicator();
        showNotification('–î–æ–±–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success');
    }
}

function removeFromCart(index) {
    if (cart[index]) {
        const removedItem = cart[index];
        cart.splice(index, 1);
        saveCart();
        renderCart();
        updateCartIndicator();
        showNotification(`–£–¥–∞–ª—ë–Ω ${removedItem.name}`, 'success');

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–∞–ª–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞
        if (currentProduct === removedItem.id) {
            quantities[currentProduct][removedItem.weight] =
                (quantities[currentProduct][removedItem.weight] || 1) - 1;
            updateModalSummary();
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥
        if (document.getElementById('productGrid')) {
            renderProducts(products);
        }
    }
}

function setupCheckoutButton() {
    const checkoutBtn = document.getElementById('checkoutBtn');
    if (checkoutBtn) {
        checkoutBtn.addEventListener('click', () => {
            if (cart.length === 0) {
                showNotification('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞', 'error');
                return;
            }

            const cartSummary = cart.map(item =>
                `${item.emoji} ${item.name} (${item.weight}–≥) ${item.hasAddons ? '—Å –¥–æ–±–∞–≤–∫–∞–º–∏' : ''} - ${item.total}‚ÇΩ`
            ).join('\n');

            Telegram.WebApp.showConfirm(
                `üõí –í–∞—à –∑–∞–∫–∞–∑:\n\n${cartSummary}\n\nüíé –ò—Ç–æ–≥–æ: ${getTotalPrice()}‚ÇΩ`,
                '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?',
                (confirmed) => {
                    if (confirmed) {
                        Telegram.WebApp.sendData(JSON.stringify({
                            action: 'checkout',
                            cart: cart,
                            total: getTotalPrice(),
                            totalItems: getTotalItems()
                        }));
                    }
                }
            );
        });
    }
}

// ===== UTILITY FUNCTIONS =====
function getAvailableWeights(product) {
    return Object.entries(product.prices || {})
        .filter(([_, price]) => price > 0)
        .map(([weight, price]) => ({ weight, price }));
}

function getBreadEmoji(name) {
    const nameLower = name.toLowerCase();
    if (nameLower.includes('—Ä–∂–∞–Ω–æ–π')) return 'üçû';
    if (nameLower.includes('–ø—à–µ–Ω–∏—á–Ω—ã–π')) return 'ü•ñ';
    if (nameLower.includes('–±–æ—Ä–æ–¥–∏–Ω—Å–∫–∏–π')) return 'ü•®';
    if (nameLower.includes('–∑–µ—Ä–Ω–æ–≤–æ–π') || nameLower.includes('—Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–π')) return 'üåæ';
    if (nameLower.includes('—Å—ã—Ä')) return 'üßÄ';
    if (nameLower.includes('–∫–ª—é–∫–≤')) return 'ü´ê';
    if (nameLower.includes('—à–æ–∫–æ–ª–∞–¥')) return 'üç´';
    if (nameLower.includes('–¥–µ—Ä–µ–≤–µ–Ω—Å–∫')) return 'üè°';
    if (nameLower.includes('–≥—Ä–∏—Å—Å–∏–Ω–∏') || nameLower.includes('–ø–∞–ª–æ—á–∫–∏')) return 'ü•ñ';
    return 'üçû';
}

function showLoadingState() {
    const grid = document.getElementById('productGrid');
    if (grid) {
        grid.innerHTML = `
            <div class="loading">
                <div class="spinner">üçû</div>
                <div>–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥...</div>
            </div>
        `;
    }
}

function showErrorState(title, message) {
    const grid = document.getElementById('productGrid') || document.getElementById('cartGrid');
    if (grid) {
        grid.innerHTML = getEmptyStateHTML('üòï', title, message);
    }
}

function getEmptyStateHTML(icon, title, subtitle) {
    return `
        <div class="empty-state">
            <div class="icon">${icon}</div>
            <div>${title}</div>
            ${subtitle ? `<div style="margin-top: 8px; font-size: 14px;">${subtitle}</div>` : ''}
        </div>
    `;
}

function showNotification(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    let notification = document.getElementById('notification');
    if (!notification) {
        notification = document.createElement('div');
        notification.id = 'notification';
        notification.className = 'notification';
        document.body.appendChild(notification);
    }

    notification.textContent = message;
    notification.className = `notification ${type} visible`;

    setTimeout(() => {
        notification.classList.remove('visible');
        setTimeout(() => notification.remove(), 300);
    }, 3000);
}

// ===== EVENT HANDLERS =====
function handleSearch(e) {
    const searchTerm = e.target.value.toLowerCase();

    if (!searchTerm) {
        renderProducts(products);
        return;
    }

    const filteredProducts = Object.entries(products).reduce((acc, [id, product]) => {
        if (product.name.toLowerCase().includes(searchTerm) ||
            (product.ingredients && product.ingredients.toLowerCase().includes(searchTerm))) {
            acc[id] = product;
        }
        return acc;
    }, {});

    renderProducts(filteredProducts);
}

function openCartPage() {
    if (cart.length === 0) {
        showNotification('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞', 'info');
        return;
    }
    window.location.href = '/cart.html';
}

// ===== EVENT LISTENERS =====
document.addEventListener('DOMContentLoaded', initApp);

document.addEventListener('click', function(e) {
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ—ë
    const modal = document.getElementById('productModal');
    if (e.target === modal) {
        closeProductModal();
    }
});

// –ü–æ–∏—Å–∫
const searchInput = document.getElementById('searchInput');
if (searchInput) {
    searchInput.addEventListener('input', handleSearch);
}