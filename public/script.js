/ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let products = [];
let cart = JSON.parse(localStorage.getItem('cart')) || [];
let selectedWeights = {};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
Telegram.WebApp.ready();
Telegram.WebApp.expand();

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
async function loadCatalog() {
  console.log('–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞'); // –õ–æ–≥ 1
  try {
    const response = await fetch('/api/catalog');
    console.log('Response status:', response.status); // –õ–æ–≥ 2
    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + response.status);
    }
    const data = await response.json();
    console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', data); // –õ–æ–≥ 3
    products = data;
    renderProducts(products);
    updateCartIndicator();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error); // –õ–æ–≥ 4
    document.getElementById('productGrid').innerHTML = `
      <div class="empty-state">
        <div class="icon">üòï</div>
        <div>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥</div>
        <div style="margin-top: 8px; font-size: 14px;">${error.message}</div>
      </div>
    `;
  }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
function renderProducts(productsToRender) {
    const grid = document.getElementById('productGrid');

    if (!productsToRender || Object.keys(productsToRender).length === 0) {
        grid.innerHTML = getEmptyStateHTML('üîç', '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å');
        return;
    }

    grid.innerHTML = Object.entries(productsToRender).map(([productId, product]) =>
        createProductCard(productId, product)
    ).join('');
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
function createProductCard(productId, product) {
    const availableWeights = getAvailableWeights(product);
    const defaultWeight = availableWeights.length > 0 ? availableWeights[0].weight : null;
    selectedWeights[productId] = selectedWeights[productId] || defaultWeight;

    return `
        <div class="product-card" data-product-id="${productId}">
            <div class="product-header">
                <div class="product-emoji">${getBreadEmoji(product.name)}</div>
                <div class="product-info">
                    <div class="product-name">${product.name}</div>
                    <div class="product-ingredients">${product.ingredients || '–°–æ—Å—Ç–∞–≤ –Ω–µ —É–∫–∞–∑–∞–Ω'}</div>
                    <div class="product-meta">
                        <div class="meta-item">‚è∞ ${product.prep_time || '1-2 –¥–Ω—è'}</div>
                        ${product.addons ? `<div class="meta-item">‚ú® ${product.addons}</div>` : ''}
                    </div>
                </div>
            </div>
            
            ${availableWeights.length > 0 ? `
                <div class="price-section">
                    <div class="price-options">
                        ${availableWeights.map(({weight, price}) => `
                            <div class="price-option ${selectedWeights[productId] === weight ? 'selected' : ''}" 
                                 onclick="selectWeight('${productId}', '${weight}')">
                                <div class="weight">${weight}–≥</div>
                                <div class="price">${price}‚ÇΩ</div>
                            </div>
                        `).join('')}
                    </div>
                    
                    <button class="add-button" onclick="addToCart('${productId}')">
                        üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É ‚Ä¢ ${getProductPrice(productId)}‚ÇΩ
                    </button>
                </div>
            ` : `
                <div style="text-align: center; color: #718096; padding: 10px;">
                    –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏
                </div>
            `}
        </div>
    `;
}

// –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Å–∞
function getAvailableWeights(product) {
    return Object.entries(product.prices || {})
        .filter(([weight, price]) => price > 0)
        .map(([weight, price]) => ({ weight, price }));
}

// –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Ö–ª–µ–±–∞
function getBreadEmoji(name) {
    const nameLower = name.toLowerCase();
    if (nameLower.includes('—Ä–∂–∞–Ω–æ–π')) return 'üçû';
    if (nameLower.includes('–ø—à–µ–Ω–∏—á–Ω—ã–π')) return 'ü•ñ';
    if (nameLower.includes('–±–æ—Ä–æ–¥–∏–Ω—Å–∫–∏–π')) return 'ü•®';
    if (nameLower.includes('–∑–µ—Ä–Ω–æ–≤–æ–π') || nameLower.includes('—Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–π')) return 'üåæ';
    if (nameLower.includes('—Å—ã—Ä')) return 'üßÄ';
    if (nameLower.includes('–∫–ª—é–∫–≤')) return 'ü´ê';
    if (nameLower.includes('—à–æ–∫–æ–ª–∞–¥')) return 'üç´';
    if (nameLower.includes('–¥–µ—Ä–µ–≤–µ–Ω—Å–∫')) return 'üè°';
    return 'üçû';
}

// –í—ã–±–æ—Ä –≤–µ—Å–∞
function selectWeight(productId, weight) {
    selectedWeights[productId] = weight;
    updateProductCard(productId);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
function updateProductCard(productId) {
    const productElement = document.querySelector(`[data-product-id="${productId}"]`);
    if (!productElement) return;

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–µ—Å
    const priceOptions = productElement.querySelectorAll('.price-option');
    priceOptions.forEach(option => {
        const optionWeight = option.querySelector('.weight').textContent.replace('–≥', '');
        option.classList.toggle('selected', optionWeight === selectedWeights[productId]);
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    const button = productElement.querySelector('.add-button');
    if (button) {
        button.innerHTML = `üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É ‚Ä¢ ${getProductPrice(productId)}‚ÇΩ`;
    }
}

// –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∞
function getProductPrice(productId) {
    const product = products[productId];
    const weight = selectedWeights[productId];
    return product.prices[weight] || 0;
}

// –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
function addToCart(productId) {
    const product = products[productId];
    const weight = selectedWeights[productId];
    const price = getProductPrice(productId);

    if (!weight || !price) {
        showNotification('–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞', 'error');
        return;
    }

    const cartItem = {
        id: productId,
        name: product.name,
        weight: weight,
        price: price,
        emoji: getBreadEmoji(product.name),
        timestamp: Date.now()
    };

    cart.push(cartItem);
    saveCart();
    updateCartIndicator();

    Telegram.WebApp.HapticFeedback.impactOccurred('light');
    showNotification(`${product.name} (${weight}–≥) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!`, 'success');
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
function saveCart() {
    localStorage.setItem('cart', JSON.stringify(cart));
}

// –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–æ—Ä–∑–∏–Ω—ã
function updateCartIndicator() {
    const indicator = document.getElementById('cartIndicator');
    const countElement = document.getElementById('cartCount');

    if (indicator && countElement) {
        countElement.textContent = cart.length;
        indicator.style.display = cart.length > 0 ? 'flex' : 'none';
    }
}

// –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
function handleSearch(e) {
    const searchTerm = e.target.value.toLowerCase();

    if (!searchTerm) {
        renderProducts(products);
        return;
    }

    const filteredProducts = Object.entries(products).reduce((acc, [id, product]) => {
        if (product.name.toLowerCase().includes(searchTerm) ||
            (product.ingredients && product.ingredients.toLowerCase().includes(searchTerm))) {
            acc[id] = product;
        }
        return acc;
    }, {});

    renderProducts(filteredProducts);
}

// –û—Ç–∫—Ä—ã—Ç—å –∫–æ—Ä–∑–∏–Ω—É
function openCart() {
    if (cart.length === 0) {
        showNotification('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞', 'info');
        return;
    }

    const cartSummary = cart.map(item =>
        `${item.emoji} ${item.name} (${item.weight}–≥) - ${item.price}‚ÇΩ`
    ).join('\n');

    const total = cart.reduce((sum, item) => sum + item.price, 0);

    Telegram.WebApp.showConfirm(
        `–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n${cartSummary}\n\nüíé –ò—Ç–æ–≥–æ: ${total}‚ÇΩ`,
        '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?',
        (confirmed) => {
            if (confirmed) {
                Telegram.WebApp.sendData(JSON.stringify({
                    action: 'checkout',
                    cart: cart,
                    total: total
                }));
            }
        }
    );
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function showNotification(message, type = 'info') {
    Telegram.WebApp.showPopup({
        title: type === 'success' ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ',
        message: message,
        buttons: [{ type: 'ok' }]
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
function showErrorState(message) {
    const grid = document.getElementById('productGrid');
    grid.innerHTML = getEmptyStateHTML('üòï', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥', message);
}

// HTML –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
function getEmptyStateHTML(icon, title, subtitle) {
    return `
        <div class="empty-state">
            <div class="icon">${icon}</div>
            <div>${title}</div>
            ${subtitle ? `<div style="margin-top: 8px; font-size: 14px;">${subtitle}</div>` : ''}
        </div>
    `;
}

// HTML –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
function getLoadingHTML() {
    return `
        <div class="loading">
            <div class="spinner">‚è≥</div>
            <div>–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥...</div>
        </div>
    `;
}

loadCatalog();