let products = [];
let cart = JSON.parse(localStorage.getItem('cart')) || [];
cart = cart.filter(item => item && item.name && item.name !== 'undefined');
let selectedWeights = {};
let currentProduct = null;
let quantities = {};
let visibleWeightControls = {};
// —Ö–µ–ª–ø–µ—Ä: —Å—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ (–ø–æ –≤—Å–µ–º –≤–µ—Å–∞–º)
function getTotalQtyForProduct(productId) {
  if (!quantities[productId]) return 0;
  return Object.values(quantities[productId]).reduce((s, v) => s + (Number(v) || 0), 0);
}


Telegram.WebApp.ready();
Telegram.WebApp.expand();

async function loadCatalog() {
  console.log('–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞');
  try {
    const response = await fetch('/api/catalog');
    console.log('Response status:', response.status);
    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + response.status);
    }
    const data = await response.json();
    console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', data);
    products = data;
    if (document.getElementById('productGrid')) renderProducts(products);
    if (document.getElementById('cartGrid')) renderCart();
    updateCartIndicator();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    if (document.getElementById('productGrid')) {
      document.getElementById('productGrid').innerHTML = getEmptyStateHTML('üòï', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥', error.message);
    }
  }
}

function renderProducts(productsToRender) {
  const grid = document.getElementById('productGrid');
  if (!grid) return;

  if (!productsToRender || Object.keys(productsToRender).length === 0) {
    grid.innerHTML = getEmptyStateHTML('üîç', '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å');
    return;
  }

  grid.innerHTML = Object.entries(productsToRender).map(([productId, product]) =>
    createProductCard(productId, product)
  ).join('');
}

function activateTransitions() {
  document.querySelectorAll('.transition-container > *').forEach(el => {
    // –¥–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â—ë –Ω–∏ —Ä–∞–∑—É –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª—Å—è
    if (!el.dataset.activated) {
      el.classList.add('hidden');
      requestAnimationFrame(() => {
        el.classList.remove('hidden');
        el.dataset.activated = "true"; // –ø–æ–º–µ—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç, —á—Ç–æ–±—ã –±–æ–ª—å—à–µ –Ω–µ –º–∏–≥–∞–ª
      });
    }
  });
}


function createProductCard(productId, product) {
  if (!quantities[productId]) quantities[productId] = {};

  const availableWeights = getAvailableWeights(product);

  // –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
  availableWeights.forEach(({ weight }) => {
    const matchingItems = cart.filter(item => item.id === productId && item.weight === weight);
    quantities[productId][weight] = matchingItems.length;
  });

  const totalQtyForProduct = getTotalQtyForProduct(productId);
  const showControls = totalQtyForProduct > 0 || visibleWeightControls[productId];

  return `
    <div class="product-card" data-product-id="${productId}">
      ${totalQtyForProduct > 0 ? `
        <div class="product-quantity-indicator">
          <span class="product-quantity-count">${totalQtyForProduct}</span>
        </div>
      ` : ''}

      <div class="product-image" onclick="openProductModal('${productId}')">
        <img src="${(product.images && product.images[0]) || '/placeholder.jpg'}" alt="${product.name}">
      </div>

      <div class="product-info">
        <div class="product-name" onclick="openProductModal('${productId}')">
          ${product.name}
        </div>
        <div class="product-ingredients">${product.ingredients || '–°–æ—Å—Ç–∞–≤ –Ω–µ —É–∫–∞–∑–∞–Ω'}</div>
        <div class="product-meta">
          <div class="meta-item">‚è∞ ${product.prep_time || '1-2 –¥–Ω—è'}</div>
          ${product.addons ? `<div class="meta-item">‚ú® –í–æ–∑–º–æ–∂–Ω—ã –¥–æ–±–∞–≤–∫–∏</div>` : ''}
        </div>
      </div>

      <div class="transition-container">
        <!-- –ö–Ω–æ–ø–∫–∞ -->
        <button class="add-to-cart-btn ${showControls ? 'hidden' : 'visible'}"
          onclick="(function(e){ e.stopPropagation(); showWeightControls('${productId}'); })(event)">
          ‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
        </button>

        <!-- –ö–æ–Ω—Ç—Ä–æ–ª—ã -->
        <div class="weight-row-container ${showControls ? 'visible' : 'hidden'}" onclick="event.stopPropagation()">
          ${availableWeights.map(({ weight, price }) => {
            const currentQty = quantities[productId][weight] || 0;
            return `
              <div class="weight-row">
                <div class="weight-info">
                  <span class="weight-label">${weight}–≥</span>
                  <span class="weight-price">${price}‚ÇΩ</span>
                </div>
                <div class="quantity-controls">
                  <button class="quantity-btn" onclick="(function(e){ e.stopPropagation(); changeWeightQuantity('${productId}', '${weight}', -1); })(event)">‚óÄ</button>
                  <span class="quantity-value" id="qty-${productId}-${weight}">${currentQty}</span>
                  <button class="quantity-btn" onclick="(function(e){ e.stopPropagation(); changeWeightQuantity('${productId}', '${weight}', 1); })(event)">‚ñ∂</button>
                </div>
              </div>
            `;
          }).join('')}
        </div>
      </div>
    </div>
  `;
}



function showWeightControls(productId) {
  visibleWeightControls[productId] = true;
  renderProducts(products);

  toggleTransition(productId, true);

  // —Ç–∞–π–º–µ—Ä –Ω–∞ 5 —Å–µ–∫, –µ—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É
  setTimeout(() => {
    const totalQty = getTotalQtyForProduct(productId);
    if (totalQty === 0) {
      visibleWeightControls[productId] = false;
      renderProducts(products);
      toggleTransition(productId, false);

      // –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏
      const btn = document.querySelector(
        `.product-card[data-product-id="${productId}"] .add-to-cart-btn`
      );
      if (btn) {
        btn.classList.add("button-highlight");
        setTimeout(() => btn.classList.remove("button-highlight"), 1000);
      }
    }
  }, 5000);
}

function toggleTransition(productId, showControls) {
  const container = document.querySelector(
    `.product-card[data-product-id="${productId}"] .transition-container`
  );
  if (!container) return;

  const button = container.querySelector(".add-to-cart-btn");
  const controls = container.querySelector(".weight-row-container");

  if (showControls) {
    button.classList.remove("visible");
    button.classList.add("hidden");
    controls.classList.remove("hidden");
    controls.classList.add("visible");
  } else {
    controls.classList.remove("visible");
    controls.classList.add("hidden");
    button.classList.remove("hidden");
    button.classList.add("visible");
  }
}




function openProductModal(productId) {
  currentProduct = productId;
  const product = products[productId];

  if (!quantities[productId]) quantities[productId] = {};

  const availableWeights = getAvailableWeights(product);

  availableWeights.forEach(({weight}) => {
    const matchingItems = cart.filter(item => item.id === productId && item.weight === weight);
    quantities[productId][weight] = matchingItems.length;
  });

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ —Å –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
  const ingredientsList = product.ingredients && product.ingredients !== '–ù–µ —É–∫–∞–∑–∞–Ω'
    ? product.ingredients.split(',').map(item => {
        const trimmed = item.trim();
        return `<li>${trimmed.charAt(0).toUpperCase() + trimmed.slice(1)}</li>`;
      }).join('')
    : '<li>–ù–µ —É–∫–∞–∑–∞–Ω</li>';

  const modalHTML = `
    <div class="modal-content">
    <div class="modal-header">
      <div class="modal-title">${product.name}</div>
      <button class="close-modal" onclick="closeProductModal()">√ó</button>
    </div>
    <div class="modal-image-slider">
      ${(product.images || ['/placeholder.jpg']).map((src, i) => `
        <div class="slide ${i === 0 ? 'active' : ''}">
          <img src="${src}" alt="${product.name}">
        </div>
      `).join('')}
    </div>
    <div class="detail-item prep-time">
      <span class="detail-label">–°—Ä–æ–∫ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:</span> ${product.prep_time || '1-2 –¥–Ω—è'}
    </div>
    <div class="detail-item ingredients">
      <span class="detail-label">–°–æ—Å—Ç–∞–≤:</span> ${product.ingredients || '–ù–µ —É–∫–∞–∑–∞–Ω'}
    </div>
      <div class="weight-section">
        <div class="section-title">–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</div>
        <div class="weight-row-container">
          ${availableWeights.map(({weight, price}) => {
            const currentQty = quantities[productId][weight] || 0;
            return `
              <div class="weight-row">
                <div class="weight-info">
                  <span class="weight-label">${weight}–≥</span>
                  <span class="weight-price">${price}‚ÇΩ</span>
                </div>
                <div class="quantity-controls">
                  <button class="quantity-btn" onclick="changeWeightQuantity('${productId}', '${weight}', -1)">‚óÄ</button>
                  <span class="quantity-value" id="qty-${productId}-${weight}">${currentQty}</span>
                  <button class="quantity-btn" onclick="changeWeightQuantity('${productId}', '${weight}', 1)">‚ñ∂</button>
                </div>
              </div>
            `;
          }).join('')}
        </div>
      </div>
      <div class="modal-summary">
          <div class="summary-item">
            <span>${product.name}:</span>
            <span id="totalItems">0 —à—Ç</span>
          </div>
          <div class="summary-totals">
            <div class="summary-item total">
              <span>üçû</span>
              <span id="modalTotal">0‚ÇΩ</span>
            </div>
            <div class="summary-item total-cart">
              <span>üõí</span>
              <span id="cartTotal">0‚ÇΩ</span>
            </div>
          </div>
        </div>
      </div>
      <div id="modalCartIndicator" class="cart-indicator" onclick="openCart()">
        üõí<span id="cartCount">${getTotalItems()}</span>
      </div>

  `;

  document.getElementById('productModal').innerHTML = modalHTML;
  document.getElementById('productModal').style.display = 'block';
  updateModalSummary(productId);

  const slides = document.querySelectorAll('.modal-image-slider .slide');
    let currentSlide = 0;
    if (slides.length > 1) {
      setInterval(() => {
        slides[currentSlide].classList.remove('active');
        currentSlide = (currentSlide + 1) % slides.length;
        slides[currentSlide].classList.add('active');
      }, 6000);
    }
}

function changeWeightQuantity(productId, weight, delta) {
  const product = products[productId];
  if (!quantities[productId]) quantities[productId] = {};
  const currentQty = quantities[productId][weight] || 0;
  const newQty = Math.max(0, currentQty + delta);
  quantities[productId][weight] = newQty;

  updateCartItem(productId, weight, delta);

  // –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
  const qtyEl = document.getElementById(`qty-${productId}-${weight}`);
  if (qtyEl) qtyEl.textContent = newQty;

  // –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –º–æ–¥–∞–ª–∫–µ
  const modalQtyEl = document.querySelector(
    `#productModal .quantity-value#qty-${productId}-${weight}`
  );
  if (modalQtyEl) modalQtyEl.textContent = newQty;

  // –æ–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
  const modalCart = document.getElementById("modalCartIndicator");
  if (modalCart) {
    modalCart.classList.toggle("visible", cart.length > 0);
    const modalCartCount = modalCart.querySelector("#cartCount");
    if (modalCartCount) modalCartCount.textContent = getTotalItems();
  }

  if (delta > 0) {
    showNotification(`–î–æ–±–∞–≤–ª–µ–Ω ${product.name} (${weight}–≥)`, "success");
  } else if (delta < 0 && currentQty > 0) {
    showNotification(`–£–¥–∞–ª—ë–Ω ${product.name} (${weight}–≥)`, "success");
  }

  const totalQty = getTotalQtyForProduct(productId);
  visibleWeightControls[productId] = totalQty > 0;

  if (currentProduct === productId) updateModalSummary(productId);

  renderProducts(products);
}



function updateModalSummary(productId) {
  const product = products[productId];
  const availableWeights = getAvailableWeights(product);

  let totalItems = 0;
  let totalPrice = 0;

  availableWeights.forEach(({weight, price}) => {
    const qty = quantities[productId][weight] || 0;
    if (qty > 0) {
      totalItems += qty;
      totalPrice += price * qty;
    }
  });

  document.getElementById('totalItems').textContent = `${totalItems} —à—Ç`;
  document.getElementById('modalTotal').textContent = `${totalPrice}‚ÇΩ`;
  document.getElementById('cartTotal').textContent = `${getTotalPrice()}‚ÇΩ`;

  const modalCart = document.getElementById('modalCartIndicator');
  if (modalCart) {
    modalCart.classList.toggle('visible', cart.length > 0);
    document.getElementById('cartCount').textContent = getTotalItems();
  }
}

function updateCartItem(productId, weight, delta) {
  const product = products[productId];
  const price = product.prices[weight] || 0;

  const matchingItems = cart.filter(item => item.id === productId && item.weight === weight);

  if (delta > 0) {
    cart.push({
      id: productId,
      name: product.name,
      weight: weight,
      quantity: 1,
      price: price,
      hasAddons: false,
      total: price,
      emoji: getBreadEmoji(product.name),
      timestamp: Date.now()
    });
  } else if (delta < 0 && matchingItems.length > 0) {
    const index = cart.findIndex(item => item.id === productId && item.weight === weight);
    if (index !== -1) cart.splice(index, 1);
  }

  saveCart();
  updateCartIndicator();
  if (document.getElementById('cartGrid')) renderCart();
}

function addToCart(productId) {
  showNotification('–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–∑–∏–Ω—É...', 'success');
  setTimeout(() => {
    closeProductModal();
    window.location.href = '/cart.html';
  }, 1000);
}

function closeProductModal() {
  document.getElementById('productModal').style.display = 'none';
  currentProduct = null;
}

function getAvailableWeights(product) {
  return Object.entries(product.prices || {})
    .filter(([_, price]) => price > 0)
    .map(([weight, price]) => ({ weight, price }));
}

function getBreadEmoji(name) {
  const nameLower = name.toLowerCase();
  if (nameLower.includes('—Ä–∂–∞–Ω–æ–π')) return 'üçû';
  if (nameLower.includes('–ø—à–µ–Ω–∏—á–Ω—ã–π')) return 'ü•ñ';
  if (nameLower.includes('–±–æ—Ä–æ–¥–∏–Ω—Å–∫–∏–π')) return 'ü•®';
  if (nameLower.includes('–∑–µ—Ä–Ω–æ–≤–æ–π') || nameLower.includes('—Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–π')) return 'üåæ';
  if (nameLower.includes('—Å—ã—Ä')) return 'üßÄ';
  if (nameLower.includes('–∫–ª—é–∫–≤')) return 'ü´ê';
  if (nameLower.includes('—à–æ–∫–æ–ª–∞–¥')) return 'üç´';
  if (nameLower.includes('–¥–µ—Ä–µ–≤–µ–Ω—Å–∫')) return 'üè°';
  if (nameLower.includes('–≥—Ä–∏—Å—Å–∏–Ω–∏') || nameLower.includes('–ø–∞–ª–æ—á–∫–∏')) return 'ü•ñ';
  return 'üçû';
}

function saveCart() {
  localStorage.setItem('cart', JSON.stringify(cart));
}

function updateCartIndicator() {
  const indicator = document.getElementById('cartIndicator');
  const countElement = document.getElementById('cartCount');
  const totalItems = getTotalItems();

  if (indicator && countElement) {
    countElement.textContent = totalItems;
    indicator.classList.toggle('visible', totalItems > 0);
  }
}

function getTotalItems() {
  return cart.length;
}

function getTotalPrice() {
  return cart.reduce((sum, item) => sum + item.total, 0);
}

function showErrorState(message) {
  const grid = document.getElementById('productGrid');
  if (grid) {
    grid.innerHTML = getEmptyStateHTML('üòï', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥', message);
  }
}

function getEmptyStateHTML(icon, title, subtitle) {
  return `
    <div class="empty-state">
      <div class="icon">${icon}</div>
      <div>${title}</div>
      ${subtitle ? `<div style="margin-top: 8px; font-size: 14px;">${subtitle}</div>` : ''}
    </div>
  `;
}

function handleSearch(e) {
  const searchTerm = e.target.value.toLowerCase();

  if (!searchTerm) {
    renderProducts(products);
    return;
  }

  const filteredProducts = Object.entries(products).reduce((acc, [id, product]) => {
    if (product.name.toLowerCase().includes(searchTerm) ||
      (product.ingredients && product.ingredients.toLowerCase().includes(searchTerm))) {
      acc[id] = product;
    }
    return acc;
  }, {});

  renderProducts(filteredProducts);
}

function openCart() {
  if (cart.length === 0) {
    showNotification('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞', 'info');
    return;
  }
  showNotification('–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–∑–∏–Ω—É...', 'success');
  setTimeout(() => {
    window.location.href = '/cart.html';
  }, 1000);
}

function showNotification(message, type = 'info') {
  let notification = document.getElementById('notification');
  if (notification) {
    notification.remove();
  }

  notification = document.createElement('div');
  notification.id = 'notification';
  notification.className = 'notification';
  notification.classList.add(type);
  notification.textContent = message;
  document.body.appendChild(notification);

  setTimeout(() => {
    notification.classList.add('visible');
  }, 10);

  setTimeout(() => {
    notification.classList.remove('visible');
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 300);
  }, 3000);
}

document.addEventListener('click', function(e) {
  const modal = document.getElementById('productModal');
  if (e.target === modal) {
    closeProductModal();
  }
});

document.getElementById('searchInput')?.addEventListener('input', handleSearch);

function renderCart() {
  const grid = document.getElementById('cartGrid');
  if (!grid) return;

  if (cart.length === 0) {
    grid.innerHTML = getEmptyStateHTML('üõí', '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞', '–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞');
    document.getElementById('cartTotal').textContent = '0‚ÇΩ';
    const checkoutBtn = document.getElementById('checkoutBtn');
    if (checkoutBtn) checkoutBtn.disabled = true;
    return;
  }

  grid.innerHTML = cart.map(item => `
    <div class="product-card" data-cart-id="${item.timestamp}">
      <div class="product-header">
        <div class="product-emoji">${item.emoji}</div>
        <div class="product-info">
          <div class="product-name">${item.name}</div>
          <div class="product-ingredients">${item.weight}–≥</div>
          <div class="product-meta">
            <div class="meta-item">${item.total}‚ÇΩ</div>
          </div>
        </div>
      </div>
      ${products[item.id]?.addons && parseInt(products[item.id].addons) > 0 ? `
        <label class="addons-checkbox" style="margin: 10px;">
          <input type="checkbox" id="addon-${item.timestamp}" ${item.hasAddons ? 'checked' : ''} onchange="toggleCartAddon(${item.timestamp}, this.checked)">
          <span class="checkmark"></span>
          –î–æ–±–∞–≤–∫–∏ (+${products[item.id].addons}‚ÇΩ)
        </label>
      ` : ''}
      <button class="remove-btn" onclick="removeCartItem(${item.timestamp})">–£–¥–∞–ª–∏—Ç—å</button>
    </div>
  `).join('');

  document.getElementById('cartTotal').textContent = `${getTotalPrice()}‚ÇΩ`;
  const checkoutBtn = document.getElementById('checkoutBtn');
  if (checkoutBtn) checkoutBtn.disabled = false;
}

function removeCartItem(timestamp) {
  const index = cart.findIndex(item => item.timestamp === Number(timestamp));
  if (index !== -1) {
    const removedItem = cart[index];
    cart.splice(index, 1);
    saveCart();
    renderCart();
    updateCartIndicator();
    showNotification(`–£–¥–∞–ª—ë–Ω ${removedItem.name} (${removedItem.weight}–≥)`, 'success');
    if (currentProduct && currentProduct === removedItem.id) {
      quantities[currentProduct][removedItem.weight] = (quantities[currentProduct][removedItem.weight] || 1) - 1;
      document.getElementById(`qty-${currentProduct}-${removedItem.weight}`).textContent = quantities[currentProduct][removedItem.weight];
      updateModalSummary(currentProduct);
    }
    if (document.getElementById('productGrid')) renderProducts(products);
  }
}

function toggleCartAddon(timestamp, checked) {
  const item = cart.find(item => item.timestamp === Number(timestamp));
  if (item && products[item.id]?.addons) {
    item.hasAddons = checked;
    const price = products[item.id].prices[item.weight] || 0;
    const addonsPrice = checked ? parseInt(products[item.id].addons || 0) : 0;
    item.total = price + addonsPrice;
    saveCart();
    renderCart();
    updateCartIndicator();
    showNotification(`${checked ? '–î–æ–±–∞–≤–ª–µ–Ω—ã' : '–£–±—Ä–∞–Ω—ã'} –¥–æ–±–∞–≤–∫–∏ –¥–ª—è ${item.name} (${item.weight}–≥)`, 'success');
  }
}

if (document.getElementById('productGrid') || document.getElementById('cartGrid')) {
  loadCatalog();
}

function clearCache() {
  localStorage.removeItem('catalog');
  loadCatalog();
}




document.getElementById('checkoutBtn')?.addEventListener('click', () => {
  if (cart.length === 0) {
    showNotification('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞', 'info');
    return;
  }
  showNotification('–û—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑...', 'success');
  const data = { action: 'checkout', cart: cart, total: getTotalPrice(), totalItems: getTotalItems() };
  Telegram.WebApp.sendData(JSON.stringify(data));
});