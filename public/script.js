// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let products = [];
let cart = JSON.parse(localStorage.getItem('cart')) || [];
let selectedWeights = {};
let selectedQuantities = {}; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
Telegram.WebApp.ready();
Telegram.WebApp.expand();

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
async function loadCatalog() {
  console.log('–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞');
  try {
    const response = await fetch('/api/catalog');
    console.log('Response status:', response.status);
    if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + response.status);
    const rawData = await response.json();
    console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', rawData);

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    products = Object.fromEntries(
      Object.entries(rawData).map(([id, product]) => [
        id,
        {
          ...product,
          prices: {
            100: product.price_100 || 0,
            500: product.price_500 || 0,
            750: product.price_750 || 0
          }
        }
      ])
    );
    renderProducts(products);
    updateCartIndicator();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    document.getElementById('productGrid').innerHTML = `
      <div class="empty-state">
        <div class="icon">üòï</div>
        <div>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥</div>
        <div style="margin-top: 8px; font-size: 14px;">${error.message}</div>
      </div>
    `;
  }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
function renderProducts(productsToRender) {
  const grid = document.getElementById('productGrid');

  if (!productsToRender || Object.keys(productsToRender).length === 0) {
    grid.innerHTML = getEmptyStateHTML('üîç', '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å');
    return;
  }

  grid.innerHTML = Object.entries(productsToRender).map(([productId, product]) =>
    createProductCard(productId, product)
  ).join('');
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
function createProductCard(productId, product) {
  const availableWeights = getAvailableWeights(product);
  const defaultWeight = availableWeights.length > 0 ? availableWeights[0].weight : null;
  selectedWeights[productId] = selectedWeights[productId] || defaultWeight;
  selectedQuantities[productId] = selectedQuantities[productId] || 1; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1

  return `
    <div class="product-card" data-product-id="${productId}">
      <div class="product-header">
        <div class="product-emoji">${getBreadEmoji(product.name)}</div>
        <div class="product-info">
          <div class="product-name">${product.name}</div>
          <div class="product-ingredients">${product.ingredients || '–°–æ—Å—Ç–∞–≤ –Ω–µ —É–∫–∞–∑–∞–Ω'}</div>
          <div class="product-meta">
            <div class="meta-item">‚è∞ ${product.prep_time || '1-2 –¥–Ω—è'}</div>
            ${product.addons ? `<div class="meta-item">‚ú® ${product.addons}</div>` : ''}
          </div>
        </div>
      </div>
      
      ${availableWeights.length > 0 ? `
        <div class="price-section">
          <div class="price-options">
            ${availableWeights.map(({weight, price}) => `
              <div class="price-option ${selectedWeights[productId] === weight ? 'selected' : ''}" 
                   onclick="selectWeight('${productId}', '${weight}')">
                <div class="weight">${weight}–≥</div>
                <div class="price">${price}‚ÇΩ</div>
              </div>
            `).join('')}
          </div>
          
          <div class="quantity-section">
            <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</label>
            <button onclick="changeQuantity('${productId}', -1)">-</button>
            <span id="quantity-${productId}">${selectedQuantities[productId]}</span>
            <button onclick="changeQuantity('${productId}', 1)">+</button>
          </div>
          
          <button class="add-button" onclick="addToCart('${productId}')">
            üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É ‚Ä¢ ${getTotalPrice(productId)}‚ÇΩ
          </button>
        </div>
      ` : `
        <div style="text-align: center; color: #718096; padding: 10px;">
          –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏
        </div>
      `}
    </div>
  `;
}

// –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Å–∞
function getAvailableWeights(product) {
  return Object.entries(product.prices || {})
    .filter(([weight, price]) => price > 0)
    .map(([weight, price]) => ({ weight: parseInt(weight), price }));
}

// –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Ö–ª–µ–±–∞
function getBreadEmoji(name) {
  const nameLower = name.toLowerCase();
  if (nameLower.includes('—Ä–∂–∞–Ω–æ–π')) return 'üçû';
  if (nameLower.includes('–ø—à–µ–Ω–∏—á–Ω—ã–π')) return 'ü•ñ';
  if (nameLower.includes('–±–æ—Ä–æ–¥–∏–Ω—Å–∫–∏–π')) return 'ü•®';
  if (nameLower.includes('–∑–µ—Ä–Ω–æ–≤–æ–π') || nameLower.includes('—Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–π')) return 'üåæ';
  if (nameLower.includes('—Å—ã—Ä')) return 'üßÄ';
  if (nameLower.includes('–∫–ª—é–∫–≤')) return 'ü´ê';
  if (nameLower.includes('—à–æ–∫–æ–ª–∞–¥')) return 'üç´';
  if (nameLower.includes('–¥–µ—Ä–µ–≤–µ–Ω—Å–∫')) return 'üè°';
  return 'üçû';
}

// –í—ã–±–æ—Ä –≤–µ—Å–∞
function selectWeight(productId, weight) {
  selectedWeights[productId] = weight;
  updateProductCard(productId);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
function updateProductCard(productId) {
  const productElement = document.querySelector(`[data-product-id="${productId}"]`);
  if (!productElement) return;

  const priceOptions = productElement.querySelectorAll('.price-option');
  priceOptions.forEach(option => {
    const optionWeight = option.querySelector('.weight').textContent.replace('–≥', '');
    option.classList.toggle('selected', optionWeight === selectedWeights[productId]);
  });

  const button = productElement.querySelector('.add-button');
  if (button) button.innerHTML = `üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É ‚Ä¢ ${getTotalPrice(productId)}‚ÇΩ`;
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
function changeQuantity(productId, delta) {
  let quantity = selectedQuantities[productId] || 1;
  quantity = Math.max(1, quantity + delta); // –ù–µ –º–µ–Ω—å—à–µ 1
  selectedQuantities[productId] = quantity;
  updateProductCard(productId);
  document.getElementById(`quantity-${productId}`).textContent = quantity;
}

// –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Ü–µ–Ω—É (—Ü–µ–Ω–∞ –∑–∞ –≤–µ—Å * –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
function getTotalPrice(productId) {
  const product = products[productId];
  const weight = selectedWeights[productId];
  const quantity = selectedQuantities[productId] || 1;
  const pricePerUnit = product.prices[weight] || 0;
  return pricePerUnit * quantity;
}

// –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
function addToCart(productId) {
  const product = products[productId];
  const weight = selectedWeights[productId];
  const quantity = selectedQuantities[productId] || 1;
  const pricePerUnit = product.prices[weight] || 0;
  const totalPrice = pricePerUnit * quantity;

  if (!weight || !pricePerUnit) {
    showNotification('–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞', 'error');
    return;
  }

  const cartItem = {
    id: productId,
    name: product.name,
    weight: weight,
    quantity: quantity,
    price: totalPrice,
    emoji: getBreadEmoji(product.name),
    timestamp: Date.now()
  };

  cart.push(cartItem);
  saveCart();
  updateCartIndicator();

  Telegram.WebApp.HapticFeedback.impactOccurred('light');
  showNotification(`${product.name} (${weight}–≥, ${quantity} —à—Ç.) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!`, 'success');
}



// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeProductModal() {
    document.getElementById('productModal').style.display = 'none';
    currentProduct = null;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getAvailableWeights(product) {
    const weights = [];
    if (product.price_100 > 0) weights.push({ weight: '100', price: product.price_100 });
    if (product.price_500 > 0) weights.push({ weight: '500', price: product.price_500 });
    if (product.price_750 > 0) weights.push({ weight: '750', price: product.price_750 });
    return weights;
}

function getBreadEmoji(name) {
    const nameLower = name.toLowerCase();
    if (nameLower.includes('—Ä–∂–∞–Ω–æ–π')) return 'üçû';
    if (nameLower.includes('–ø—à–µ–Ω–∏—á–Ω—ã–π')) return 'ü•ñ';
    if (nameLower.includes('–±–æ—Ä–æ–¥–∏–Ω—Å–∫–∏–π')) return 'ü•®';
    if (nameLower.includes('–∑–µ—Ä–Ω–æ–≤–æ–π') || nameLower.includes('—Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–π')) return 'üåæ';
    if (nameLower.includes('—Å—ã—Ä')) return 'üßÄ';
    if (nameLower.includes('–∫–ª—é–∫–≤')) return 'ü´ê';
    if (nameLower.includes('—à–æ–∫–æ–ª–∞–¥')) return 'üç´';
    if (nameLower.includes('–¥–µ—Ä–µ–≤–µ–Ω—Å–∫')) return 'üè°';
    if (nameLower.includes('–≥—Ä–∏—Å—Å–∏–Ω–∏') || nameLower.includes('–ø–∞–ª–æ—á–∫–∏')) return 'ü•ñ';
    return 'üçû';
}

function saveCart() {
    localStorage.setItem('cart', JSON.stringify(cart));
}

function updateCartIndicator() {
    const indicator = document.getElementById('cartIndicator');
    const countElement = document.getElementById('cartCount');
    const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);

    if (indicator && countElement) {
        countElement.textContent = totalItems;
        indicator.style.display = totalItems > 0 ? 'flex' : 'none';
    }
}

function showErrorState(message) {
    const grid = document.getElementById('productGrid');
    grid.innerHTML = getEmptyStateHTML('üòï', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥', message);
}

function getEmptyStateHTML(icon, title, subtitle) {
    return `
        <div class="empty-state">
            <div class="icon">${icon}</div>
            <div>${title}</div>
            ${subtitle ? `<div style="margin-top: 8px; font-size: 14px;">${subtitle}</div>` : ''}
        </div>
    `;
}

// –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
function handleSearch(e) {
    const searchTerm = e.target.value.toLowerCase();

    if (!searchTerm) {
        renderProducts(products);
        return;
    }

    const filteredProducts = Object.entries(products).reduce((acc, [id, product]) => {
        if (product.name.toLowerCase().includes(searchTerm) ||
            (product.ingredients && product.ingredients.toLowerCase().includes(searchTerm))) {
            acc[id] = product;
        }
        return acc;
    }, {});

    renderProducts(filteredProducts);
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
function openCart() {
    if (cart.length === 0) {
        showNotification('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞', 'info');
        return;
    }

    const cartSummary = cart.map(item =>
        `${item.emoji} ${item.name} (${item.weight}–≥) ${item.hasAddons ? '—Å –¥–æ–±–∞–≤–∫–∞–º–∏ ' : ''}x${item.quantity} - ${item.total}‚ÇΩ`
    ).join('\n');

    const total = cart.reduce((sum, item) => sum + item.total, 0);
    const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);

    Telegram.WebApp.showConfirm(
        `üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ (${totalItems} —Ç–æ–≤–∞—Ä–æ–≤):\n\n${cartSummary}\n\nüíé –ò—Ç–æ–≥–æ: ${total}‚ÇΩ`,
        '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?',
        (confirmed) => {
            if (confirmed) {
                Telegram.WebApp.sendData(JSON.stringify({
                    action: 'checkout',
                    cart: cart,
                    total: total,
                    totalItems: totalItems
                }));
            }
        }
    );
}

function showNotification(message, type = 'info') {
    Telegram.WebApp.showPopup({
        title: type === 'success' ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ',
        message: message,
        buttons: [{ type: 'ok' }]
    });
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
document.addEventListener('click', function(e) {
    const modal = document.getElementById('productModal');
    if (e.target === modal) {
        closeProductModal();
    }
});

// –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ–∏—Å–∫–∞
document.getElementById('searchInput').addEventListener('input', handleSearch);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ


document.getElementById('searchInput').addEventListener('input', handleSearch);
loadCatalog();