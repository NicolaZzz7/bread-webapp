let products = [];
let cart = JSON.parse(localStorage.getItem('cart')) || [];
cart = cart.filter(item => item && item.name && item.name !== 'undefined');
let selectedWeights = {};
let currentProduct = null;
let quantities = {};

Telegram.WebApp.ready();
Telegram.WebApp.expand();

async function loadCatalog() {
  console.log('–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞');
  try {
    const response = await fetch('/api/catalog');
    console.log('Response status:', response.status);
    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + response.status);
    }
    const data = await response.json();
    console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', data);
    products = data;
    if (document.getElementById('productGrid')) renderProducts(products);
    if (document.getElementById('cartGrid')) renderCart();
    updateCartIndicator();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    if (document.getElementById('productGrid')) {
      document.getElementById('productGrid').innerHTML = getEmptyStateHTML('üòï', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥', error.message);
    }
  }
}

function renderProducts(productsToRender) {
  const grid = document.getElementById('productGrid');
  if (!grid) return;

  if (!productsToRender || Object.keys(productsToRender).length === 0) {
    grid.innerHTML = getEmptyStateHTML('üîç', '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å');
    return;
  }

  grid.innerHTML = Object.entries(productsToRender).map(([productId, product]) =>
    createProductCard(productId, product)
  ).join('');
}

function createProductCard(productId, product) {
  const quantityInCart = cart.filter(item => item.id === productId).length;
  return `
    <div class="product-card" data-product-id="${productId}" onclick="openProductModal('${productId}')">
      <div class="product-header">
        <div class="product-emoji">${getBreadEmoji(product.name)}</div>
        <div class="product-info">
          <div class="product-name">${product.name}</div>
          <div class="product-ingredients">${product.ingredients || '–°–æ—Å—Ç–∞–≤ –Ω–µ —É–∫–∞–∑–∞–Ω'}</div>
          <div class="product-meta">
            <div class="meta-item">‚è∞ ${product.prep_time || '1-2 –¥–Ω—è'}</div>
            ${product.addons ? `<div class="meta-item">‚ú® –í–æ–∑–º–æ–∂–Ω—ã –¥–æ–±–∞–≤–∫–∏</div>` : ''}
          </div>
        </div>
      </div>
      ${quantityInCart > 0 ? `
        <div class="product-quantity-indicator">
          <span class="product-quantity-count">${quantityInCart}</span>
        </div>
      ` : ''}
    </div>
  `;
}

function openProductModal(productId) {
  currentProduct = productId;
  const product = products[productId];

  if (!quantities[productId]) quantities[productId] = {};

  const availableWeights = getAvailableWeights(product);

  availableWeights.forEach(({weight}) => {
    const matchingItems = cart.filter(item => item.id === productId && item.weight === weight);
    quantities[productId][weight] = matchingItems.length;
  });

  const modalHTML = `
    <div class="modal-content">
      <div class="modal-header">
        <div class="modal-title">${product.name}</div>
        <button class="close-modal" onclick="closeProductModal()">√ó</button>
      </div>
      <div class="modal-emoji">${getBreadEmoji(product.name)}</div>
      <div class="modal-details">
        <div class="detail-item">
          <span class="detail-label">–°–æ—Å—Ç–∞–≤:</span> ${product.ingredients || '–ù–µ —É–∫–∞–∑–∞–Ω'}
        </div>
        <div class="detail-item">
          <span class="detail-label">–°—Ä–æ–∫ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:</span> ${product.prep_time || '1-2 –¥–Ω—è'}
        </div>
      </div>
      <div class="weight-section">
        <div class="section-title">–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</div>
        ${availableWeights.map(({weight, price}) => {
          const currentQty = quantities[productId][weight] || 0;
          return `
            <div class="weight-row">
              <div class="weight-info">
                <span class="weight-label">${weight}–≥</span>
                <span class="weight-price">${price}‚ÇΩ</span>
              </div>
              <div class="quantity-controls">
                <button class="quantity-btn" onclick="changeWeightQuantity('${productId}', '${weight}', -1)">-</button>
                <span class="quantity-value" id="qty-${productId}-${weight}">${currentQty}</span>
                <button class="quantity-btn" onclick="changeWeightQuantity('${productId}', '${weight}', 1)">+</button>
              </div>
            </div>
          `;
        }).join('')}
      </div>
      <div class="modal-summary">
        <div class="summary-item">
          <span>–¢–æ–≤–∞—Ä–æ–≤:</span>
          <span id="totalItems">0 —à—Ç</span>
        </div>
        <div class="summary-item total">
          <span>–ò—Ç–æ–≥–æ:</span>
          <span id="modalTotal">0‚ÇΩ</span>
        </div>
      </div>
      <button class="add-to-cart-btn" id="addToCartBtn" onclick="addToCart('${productId}')">
        üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É
      </button>
    </div>
  `;

  document.getElementById('productModal').innerHTML = modalHTML;
  document.getElementById('productModal').style.display = 'block';
  updateModalSummary(productId);
}

function changeWeightQuantity(productId, weight, delta) {
  const product = products[productId];
  const currentQty = quantities[productId][weight] || 0;
  const newQty = Math.max(0, currentQty + delta);
  quantities[productId][weight] = newQty;

  updateCartItem(productId, weight, delta);
  document.getElementById(`qty-${productId}-${weight}`).textContent = newQty;

  if (delta > 0) {
    showNotification(`–î–æ–±–∞–≤–ª–µ–Ω ${product.name} (${weight}–≥)`, 'success');
  } else if (delta < 0 && currentQty > 0) {
    showNotification(`–£–¥–∞–ª—ë–Ω ${product.name} (${weight}–≥)`, 'success');
  }

  updateModalSummary(productId);
  renderProducts(products);
}

function updateModalSummary(productId) {
  const product = products[productId];
  const availableWeights = getAvailableWeights(product);

  let totalItems = 0;
  let totalPrice = 0;

  availableWeights.forEach(({weight, price}) => {
    const qty = quantities[productId][weight] || 0;
    if (qty > 0) {
      totalItems += qty;
      totalPrice += price * qty;
    }
  });

  document.getElementById('totalItems').textContent = `${totalItems} —à—Ç`;
  document.getElementById('modalTotal').textContent = `${totalPrice}‚ÇΩ`;
  const addToCartBtn = document.getElementById('addToCartBtn');
  if (addToCartBtn) {
    addToCartBtn.style.display = cart.length > 0 ? 'block' : 'none';
  }
}

function updateCartItem(productId, weight, delta) {
  const product = products[productId];
  const price = product.prices[weight] || 0;

  const matchingItems = cart.filter(item => item.id === productId && item.weight === weight);

  if (delta > 0) {
    cart.push({
      id: productId,
      name: product.name,
      weight: weight,
      quantity: 1,
      price: price,
      hasAddons: false,
      total: price,
      emoji: getBreadEmoji(product.name),
      timestamp: Date.now()
    });
  } else if (delta < 0 && matchingItems.length > 0) {
    const index = cart.findIndex(item => item.id === productId && item.weight === weight);
    if (index !== -1) cart.splice(index, 1);
  }

  saveCart();
  updateCartIndicator();
  if (document.getElementById('cartGrid')) renderCart();
}

function addToCart(productId) {
  showNotification('–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–∑–∏–Ω—É...', 'success');
  setTimeout(() => {
    closeProductModal();
    window.location.href = '/cart.html';
  }, 1000);
}

function closeProductModal() {
  document.getElementById('productModal').style.display = 'none';
  currentProduct = null;
}

function getAvailableWeights(product) {
  return Object.entries(product.prices || {})
    .filter(([_, price]) => price > 0)
    .map(([weight, price]) => ({ weight, price }));
}

function getBreadEmoji(name) {
  const nameLower = name.toLowerCase();
  if (nameLower.includes('—Ä–∂–∞–Ω–æ–π')) return 'üçû';
  if (nameLower.includes('–ø—à–µ–Ω–∏—á–Ω—ã–π')) return 'ü•ñ';
  if (nameLower.includes('–±–æ—Ä–æ–¥–∏–Ω—Å–∫–∏–π')) return 'ü•®';
  if (nameLower.includes('–∑–µ—Ä–Ω–æ–≤–æ–π') || nameLower.includes('—Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–π')) return 'üåæ';
  if (nameLower.includes('—Å—ã—Ä')) return 'üßÄ';
  if (nameLower.includes('–∫–ª—é–∫–≤')) return 'ü´ê';
  if (nameLower.includes('—à–æ–∫–æ–ª–∞–¥')) return 'üç´';
  if (nameLower.includes('–¥–µ—Ä–µ–≤–µ–Ω—Å–∫')) return 'üè°';
  if (nameLower.includes('–≥—Ä–∏—Å—Å–∏–Ω–∏') || nameLower.includes('–ø–∞–ª–æ—á–∫–∏')) return 'ü•ñ';
  return 'üçû';
}

function saveCart() {
  localStorage.setItem('cart', JSON.stringify(cart));
}

function updateCartIndicator() {
  const indicator = document.getElementById('cartIndicator');
  const countElement = document.getElementById('cartCount');
  const totalItems = getTotalItems();

  if (indicator && countElement) {
    countElement.textContent = totalItems;
    indicator.classList.toggle('visible', totalItems > 0);
  }
}

function getTotalItems() {
  return cart.length;
}

function getTotalPrice() {
  return cart.reduce((sum, item) => sum + item.total, 0);
}

function showErrorState(message) {
  const grid = document.getElementById('productGrid');
  if (grid) {
    grid.innerHTML = getEmptyStateHTML('üòï', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥', message);
  }
}

function getEmptyStateHTML(icon, title, subtitle) {
  return `
    <div class="empty-state">
      <div class="icon">${icon}</div>
      <div>${title}</div>
      ${subtitle ? `<div style="margin-top: 8px; font-size: 14px;">${subtitle}</div>` : ''}
    </div>
  `;
}

function handleSearch(e) {
  const searchTerm = e.target.value.toLowerCase();

  if (!searchTerm) {
    renderProducts(products);
    return;
  }

  const filteredProducts = Object.entries(products).reduce((acc, [id, product]) => {
    if (product.name.toLowerCase().includes(searchTerm) ||
      (product.ingredients && product.ingredients.toLowerCase().includes(searchTerm))) {
      acc[id] = product;
    }
    return acc;
  }, {});

  renderProducts(filteredProducts);
}

function openCart() {
  if (cart.length === 0) {
    showNotification('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞', 'info');
    return;
  }
  showNotification('–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–∑–∏–Ω—É...', 'success');
  setTimeout(() => {
    window.location.href = '/cart.html';
  }, 1000);
}

function showNotification(message, type = 'info') {
  let notification = document.getElementById('notification');
  if (notification) {
    notification.remove(); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
  }

  notification = document.createElement('div');
  notification.id = 'notification';
  notification.className = 'notification'; // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
  notification.classList.add(type); // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø (success, error, info)
  notification.textContent = message;
  document.body.appendChild(notification);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  setTimeout(() => {
    notification.classList.add('visible');
  }, 10); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏

  // –°–∫—Ä—ã–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
  setTimeout(() => {
    notification.classList.remove('visible');
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 300); // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
  }, 3000);
}

document.addEventListener('click', function(e) {
  const modal = document.getElementById('productModal');
  if (e.target === modal) {
    closeProductModal();
  }
});

document.getElementById('searchInput')?.addEventListener('input', handleSearch);

function renderCart() {
  const grid = document.getElementById('cartGrid');
  if (!grid) return;

  if (cart.length === 0) {
    grid.innerHTML = getEmptyStateHTML('üõí', '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞', '–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞');
    document.getElementById('cartTotal').textContent = '0‚ÇΩ';
    const checkoutBtn = document.getElementById('checkoutBtn');
    if (checkoutBtn) checkoutBtn.disabled = true;
    return;
  }

  grid.innerHTML = cart.map(item => `
    <div class="product-card" data-cart-id="${item.timestamp}">
      <div class="product-header">
        <div class="product-emoji">${item.emoji}</div>
        <div class="product-info">
          <div class="product-name">${item.name}</div>
          <div class="product-ingredients">${item.weight}–≥</div>
          <div class="product-meta">
            <div class="meta-item">${item.total}‚ÇΩ</div>
          </div>
        </div>
      </div>
      ${products[item.id]?.addons && parseInt(products[item.id].addons) > 0 ? `
        <label class="addons-checkbox" style="margin: 10px;">
          <input type="checkbox" id="addon-${item.timestamp}" ${item.hasAddons ? 'checked' : ''} onchange="toggleCartAddon(${item.timestamp}, this.checked)">
          <span class="checkmark"></span>
          –î–æ–±–∞–≤–∫–∏ (+${products[item.id].addons}‚ÇΩ)
        </label>
      ` : ''}
      <button class="remove-btn" onclick="removeCartItem(${item.timestamp})">–£–¥–∞–ª–∏—Ç—å</button>
    </div>
  `).join('');

  document.getElementById('cartTotal').textContent = `${getTotalPrice()}‚ÇΩ`;
  const checkoutBtn = document.getElementById('checkoutBtn');
  if (checkoutBtn) checkoutBtn.disabled = false;
}

function removeCartItem(timestamp) {
  const index = cart.findIndex(item => item.timestamp === Number(timestamp));
  if (index !== -1) {
    const removedItem = cart[index];
    cart.splice(index, 1);
    saveCart();
    renderCart();
    updateCartIndicator();
    showNotification(`–£–¥–∞–ª—ë–Ω ${removedItem.name} (${removedItem.weight}–≥)`, 'success');
    if (currentProduct && currentProduct === removedItem.id) {
      quantities[currentProduct][removedItem.weight] = (quantities[currentProduct][removedItem.weight] || 1) - 1;
      document.getElementById(`qty-${currentProduct}-${removedItem.weight}`).textContent = quantities[currentProduct][removedItem.weight];
      updateModalSummary(currentProduct);
    }
    if (document.getElementById('productGrid')) renderProducts(products);
  }
}

function toggleCartAddon(timestamp, checked) {
  const item = cart.find(item => item.timestamp === Number(timestamp));
  if (item && products[item.id]?.addons) {
    item.hasAddons = checked;
    const price = products[item.id].prices[item.weight] || 0;
    const addonsPrice = checked ? parseInt(products[item.id].addons || 0) : 0;
    item.total = price + addonsPrice;
    saveCart();
    renderCart();
    updateCartIndicator();
    showNotification(`${checked ? '–î–æ–±–∞–≤–ª–µ–Ω—ã' : '–£–±—Ä–∞–Ω—ã'} –¥–æ–±–∞–≤–∫–∏ –¥–ª—è ${item.name} (${item.weight}–≥)`, 'success');
  }
}

if (document.getElementById('productGrid') || document.getElementById('cartGrid')) {
  loadCatalog();
}

function clearCache() {
  localStorage.removeItem('catalog');
  loadCatalog();
}

document.getElementById('checkoutBtn')?.addEventListener('click', () => {
  if (cart.length === 0) {
    showNotification('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞', 'info');
    return;
  }
  showNotification('–û—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑...', 'success');
  const data = { action: 'checkout', cart: cart, total: getTotalPrice(), totalItems: getTotalItems() };
  Telegram.WebApp.sendData(JSON.stringify(data));
});